FUNCTION_BLOCK "GEN_Sinus"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      Amplitude { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real := 1.0;   // Amplitude
      Offset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real := 1.0;   // Offset
      Period { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time := T#10S;   // Periode
      RstOp { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Reset values
   END_VAR

   VAR_OUTPUT 
      SinusValues { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;   // Calculated Sinus values
      Error { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // "0" = no error; "1" = error
      ErrorId { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DWord;   // Error source
   END_VAR

   VAR 
      stat { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         "counter" { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : UDInt;   // Counter value
      END_STRUCT;
      SYS_OBInfo_Instance { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "SYS_OBInfo";
   END_VAR

   VAR_TEMP 
      tempDword : DWord;
      temp : Struct
         periodInMs : UDInt;
         cycleTimeInMs : UDInt;
         rad : Real;   // Size of an angle in radians
      END_STRUCT;
   END_VAR

   VAR CONSTANT 
      PI : Real := 3.141593;   // PI
      ERROR_SUB_LOCAL : Word := 16#1;   // Error ID local error
      ERROR_ID_WRONGOB : DWord := 16#8001;
      ERROR_SUB_OBInfo : Word := 16#2;
   END_VAR


BEGIN
	(*
	//=============================================================================
	
	//-----------------------------------------------------------------------------
	// Library:       LGF (Library General Functions)
	// Tested with:   CPU1212C DC/DC/DC FW:V4.2
	// Engineering:   TIA Portal V15 Upd 2
	Restrictions:   Call in cyclic interrupt
	// Requirements:  PLC (S7-1200 / S7-1500)
	// Functionality: This function generates a cosinus signal
	//-----------------------------------------------------------------------------
	// Change log table:
	// Version  Date        In charge/Changes applied
	// 01.00.00 03.07.2018  Siemens Industry Online Support
	//                      First released version
	// 01.00.01 17.08.2018  Siemens Industry Online Support
	//                      Upgrade: TIA V15 Update 2
	// 01.00.02 23.11.2018  Siemens Industry Online Support
	//                      Upgrade: TIA V15.1
	//-----------------------------------------------------------------------------
	//Status Codes: -
	//
	//=============================================================================
	*)
	
	// Initialize
	#SYS_OBInfo_Instance();
	IF #SYS_OBInfo_Instance.Error THEN
	    "DG_BlockError"(Sub        := #ERROR_SUB_OBInfo,
	                    SubErrorId := #SYS_OBInfo_Instance.ErrorID,
	                    ErrorId    := #ErrorId);
	    RETURN;
	END_IF;
	
	IF NOT #SYS_OBInfo_Instance.IsObCycle THEN
	    #tempDword := #ERROR_ID_WRONGOB;
	    "DG_BlockError"(Sub        := #ERROR_SUB_LOCAL,
	                    SubErrorId := #tempDword,
	                    ErrorId    := #ErrorId);
	    RETURN;
	END_IF;
	    
	IF #RstOp = true THEN
	    #RstOp := false;
	    #stat.counter := 0;
	    #SinusValues := 0;
	ELSE
	    // Increment Counter with each call of "OB_Cyclic_interrupt"
	    #temp.cycleTimeInMs := TIME_TO_UDINT(#SYS_OBInfo_Instance.SampleTime);
	    #temp.periodInMs := TIME_TO_UDINT(#Period);
	    
	    #stat.counter := #stat.counter + (#temp.cycleTimeInMs);
	    #stat.counter := #stat.counter MOD (#temp.periodInMs);
	    
	    #temp.rad := UDINT_TO_REAL(#stat.counter) * 2.0 * #PI / (UDINT_TO_REAL(#temp.periodInMs));
	    
	    #SinusValues := SIN(#temp.rad) * #Amplitude + #Offset;
	END_IF;
	
	#Error := #ErrorId <> 16#0;
END_FUNCTION_BLOCK

