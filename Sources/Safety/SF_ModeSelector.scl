FUNCTION_BLOCK "SF_ModeSelector"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      Activate { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Mode0 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Mode1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Mode2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Mode3 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Mode4 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Mode5 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Mode6 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Mode7 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Unlock { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_SetMode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      AutoSetMode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      ModeMonitorTime { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;
      Reset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
   END_VAR

   VAR_OUTPUT 
      Ready { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Mode0Sel { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Mode1Sel { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Mode2Sel { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Mode3Sel { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Mode4Sel { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Mode5Sel { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Mode6Sel { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_Mode7Sel { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_AnyModeSel { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      SafetyDemand { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      ResetRequest { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      Error { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      DiagCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
   END_VAR

   VAR 
      stat { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         prev { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
            Reset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
            S_SetMode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         END_STRUCT;
         ModeSel { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      END_STRUCT;
      SM { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "StateMachine";
   END_VAR

   VAR_TEMP 
      temp : Struct
         Error1 : Bool;
         Error2 : Bool;
         ModeCount : USInt;
         S_Mode : Array[0..#MAX_MODE_INDEX] of Bool;
      END_STRUCT;
      i : Int;
   END_VAR

   VAR CONSTANT 
      MAX_MODE_INDEX : Int := 7;
      ST_IDLE : Int;
      ST_MODECHANGED : Int := 1;
      ST_MODESELECTED : Int := 2;
      ST_MODELOCKED : Int := 3;
      ST_ERRORSHORT : Int := 4;
      ST_ERRORSHORT_RE : Int := 5;
      ST_ERROROPEN : Int := 6;
      ST_ERROROPEN_RE : Int := 7;
   END_VAR


BEGIN
	#temp.S_Mode[0] := #S_Mode0;
	#temp.S_Mode[1] := #S_Mode1;
	#temp.S_Mode[2] := #S_Mode2;
	#temp.S_Mode[3] := #S_Mode3;
	#temp.S_Mode[4] := #S_Mode4;
	#temp.S_Mode[5] := #S_Mode5;
	#temp.S_Mode[6] := #S_Mode6;
	#temp.S_Mode[7] := #S_Mode7;
	
	#temp.ModeCount := 0;
	FOR #i := 0 TO #MAX_MODE_INDEX DO
	    #temp.ModeCount += BOOL_TO_USINT(#temp.S_Mode[#i]);
	END_FOR;
	
	#temp.Error1 := #temp.ModeCount > 1;
	#temp.Error2 := #temp.ModeCount = 0;
	
	#SM.aTr[#ST_IDLE, #ST_MODECHANGED] := "SM_Trans"(C := #Activate, P := 0);
	
	#SM.aTr[#ST_MODECHANGED, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#SM.aTr[#ST_MODECHANGED, #ST_ERRORSHORT] := "SM_Trans"(C := #temp.Error1, P := 1);
	#SM.aTr[#ST_MODECHANGED, #ST_ERROROPEN] := "SM_Trans"(C := #SM.timState >= #ModeMonitorTime AND #temp.Error2, P := 2);
	#SM.aTr[#ST_MODECHANGED, #ST_MODESELECTED] := "SM_Trans"(C := (#AutoSetMode OR (#S_SetMode AND NOT #stat.prev.S_SetMode))
	                                                         AND #S_Unlock AND #temp.ModeCount = 1, P := 3);
	
	#SM.aTr[#ST_MODESELECTED, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#SM.aTr[#ST_MODESELECTED, #ST_ERRORSHORT] := "SM_Trans"(C := #temp.Error1, P := 1);
	#SM.aTr[#ST_MODESELECTED, #ST_MODECHANGED] := "SM_Trans"(C := NOT #temp.S_Mode[#stat.ModeSel], P := 2);
	#SM.aTr[#ST_MODESELECTED, #ST_MODELOCKED] := "SM_Trans"(C := NOT #S_Unlock, P := 3);
	
	#SM.aTr[#ST_MODELOCKED, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#SM.aTr[#ST_MODELOCKED, #ST_ERRORSHORT] := "SM_Trans"(C := #temp.Error1 AND #S_Unlock, P := 1);
	#SM.aTr[#ST_MODELOCKED, #ST_MODECHANGED] := "SM_Trans"(C := NOT #temp.S_Mode[#stat.ModeSel] AND #S_Unlock, P := 2);
	#SM.aTr[#ST_MODELOCKED, #ST_MODESELECTED] := "SM_Trans"(C := #S_Unlock, P := 3);
	
	#SM.aTr[#ST_ERROROPEN, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#SM.aTr[#ST_ERROROPEN, #ST_ERROROPEN_RE] := "SM_Trans"(C := #Reset AND #stat.prev.Reset, P := 1);
	#SM.aTr[#ST_ERROROPEN, #ST_MODECHANGED] := "SM_Trans"(C := #temp.ModeCount = 1 AND #Reset AND NOT #stat.prev.Reset, P := 2);
	
	#SM.aTr[#ST_ERROROPEN_RE, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#SM.aTr[#ST_ERROROPEN_RE, #ST_ERROROPEN] := "SM_Trans"(C := NOT #Reset, P := 1);
	
	#SM.aTr[#ST_ERRORSHORT, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#SM.aTr[#ST_ERRORSHORT, #ST_ERRORSHORT_RE] := "SM_Trans"(C := #Reset AND #stat.prev.Reset, P := 1);
	#SM.aTr[#ST_ERRORSHORT, #ST_MODECHANGED] := "SM_Trans"(C := #Reset AND NOT #stat.prev.Reset AND (#temp.ModeCount = 0 OR #temp.ModeCount = 1), P := 2);
	
	#SM.aTr[#ST_ERRORSHORT_RE, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#SM.aTr[#ST_ERRORSHORT_RE, #ST_ERRORSHORT] := "SM_Trans"(C := NOT #Reset, P := 1);
	
	CASE #SM.iState OF
	    #ST_IDLE:
	        #DiagCode := 16#0000;
	        
	    #ST_MODESELECTED:
	        #DiagCode := 16#8000;
	        
	    #ST_MODECHANGED:
	        IF #SM.xStateLastCall THEN
	            FOR #i := 0 TO #MAX_MODE_INDEX DO
	                IF #temp.S_Mode[#i] THEN
	                    #stat.ModeSel := #i;
	                    EXIT;
	                END_IF;
	            END_FOR;
	        END_IF;
	        
	        #DiagCode := 16#8802;
	        
	    #ST_MODELOCKED:
	        #DiagCode := 16#8010;
	        
	    #ST_ERRORSHORT:
	        IF #temp.ModeCount = 0 OR #temp.ModeCount = 1 THEN
	            #DiagCode := 16#C410;
	        ELSE
	            #DiagCode := 16#C010;
	        END_IF;
	        
	    #ST_ERRORSHORT_RE:
	        #DiagCode := 16#C011;
	        
	    #ST_ERROROPEN:
	        IF #temp.ModeCount = 1 THEN
	            #DiagCode := 16#C420;
	        ELSE
	            #DiagCode := 16#C020;
	        END_IF;
	        
	    #ST_ERROROPEN_RE:
	        #DiagCode := 16#C021;
	        
	END_CASE;
	
	
	#SM();
	
	
	"SF_DiagToOutputs"(DiagCode := #DiagCode,
	                   Ready => #Ready,
	                   SafetyDemand => #SafetyDemand,
	                   ResetRequest => #ResetRequest,
	                   Error => #Error);
	
	IF #SM.iState = #ST_MODESELECTED OR #SM.iState = #ST_MODELOCKED THEN
	    #S_AnyModeSel := true;
	    #S_Mode0Sel := #stat.ModeSel = 0;
	    #S_Mode1Sel := #stat.ModeSel = 1;
	    #S_Mode2Sel := #stat.ModeSel = 2;
	    #S_Mode3Sel := #stat.ModeSel = 3;
	    #S_Mode4Sel := #stat.ModeSel = 4;
	    #S_Mode5Sel := #stat.ModeSel = 5;
	    #S_Mode6Sel := #stat.ModeSel = 6;
	    #S_Mode7Sel := #stat.ModeSel = 7;
	ELSE
	    #S_AnyModeSel := false;
	    #S_Mode0Sel := false;
	    #S_Mode1Sel := false;
	    #S_Mode2Sel := false;
	    #S_Mode3Sel := false;
	    #S_Mode4Sel := false;
	    #S_Mode5Sel := false;
	    #S_Mode6Sel := false;
	    #S_Mode7Sel := false;
	END_IF;
	
	#stat.prev.Reset := #Reset;
	#stat.prev.S_SetMode := #S_SetMode;
END_FUNCTION_BLOCK

