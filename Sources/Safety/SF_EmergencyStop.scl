FUNCTION_BLOCK "SF_EmergencyStop"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      Activate { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Активация защиты (1 = устройство активно)
      S_EstopIn { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      S_StartReset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Тип сброса при запуске (0 = требуется ручной сброс)
      S_AutoReset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Тип сброса после срабатывания защиты (0 = требуется ручной сброс)
      Reset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Сброс защиты (0 => 1)
   END_VAR

   VAR_OUTPUT 
      Ready { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Блок активен
      S_EstopOut { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      SafetyDemand { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Запрос безопасного состояния
      ResetRequest { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Требуется сброс
      Error { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Ошибка исполнения блока
      DiagCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;   // Диагностический код
   END_VAR

   VAR 
      stat { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         prev { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
            Reset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         END_STRUCT;
      END_STRUCT;
      SM { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "StateMachine";
   END_VAR

   VAR CONSTANT 
      ST_IDLE : Int;
      ST_INIT : Int := 1;
      ST_WAITESTOP1 : Int := 2;
      ST_WAITESTOP2 : Int := 3;
      ST_WAITRESET1 : Int := 4;
      ST_WAITRESET2 : Int := 5;
      ST_ENABLED : Int := 6;
   END_VAR


BEGIN
	#SM.aTr[#ST_IDLE, #ST_INIT] := "SM_Trans"(C := #Activate, P := 0);
	
	#SM.aTr[#ST_INIT, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#SM.aTr[#ST_INIT, #ST_WAITESTOP1] := "SM_Trans"(C := NOT #S_StartReset, P := 1);
	#SM.aTr[#ST_INIT, #ST_WAITESTOP2] := "SM_Trans"(C := #S_StartReset AND NOT #S_EstopIn, P := 2);
	#SM.aTr[#ST_INIT, #ST_ENABLED] := "SM_Trans"(C := #S_StartReset AND #S_EstopIn, P := 3);
	
	#SM.aTr[#ST_WAITESTOP1, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#SM.aTr[#ST_WAITESTOP1, #ST_WAITRESET1] := "SM_Trans"(C := #S_EstopIn, P := 1);
	
	#SM.aTr[#ST_WAITRESET1, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#SM.aTr[#ST_WAITRESET1, #ST_WAITESTOP1] := "SM_Trans"(C := NOT #S_EstopIn, P := 1);
	#SM.aTr[#ST_WAITRESET1, #ST_ENABLED] := "SM_Trans"(C := #Reset AND NOT #stat.prev.Reset, P := 2);
	
	#SM.aTr[#ST_WAITESTOP2, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#SM.aTr[#ST_WAITESTOP2, #ST_WAITRESET2] := "SM_Trans"(C := #S_EstopIn AND NOT #S_AutoReset, P := 1);
	#SM.aTr[#ST_WAITESTOP2, #ST_ENABLED] := "SM_Trans"(C := #S_EstopIn AND #S_AutoReset, P := 2);
	
	#SM.aTr[#ST_WAITRESET2, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#SM.aTr[#ST_WAITRESET2, #ST_WAITESTOP2] := "SM_Trans"(C := NOT #S_EstopIn, P := 1);
	#SM.aTr[#ST_WAITRESET2, #ST_ENABLED] := "SM_Trans"(C := #Reset AND NOT #stat.prev.Reset, P := 2);
	
	#SM.aTr[#ST_ENABLED, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#SM.aTr[#ST_ENABLED, #ST_WAITESTOP2] := "SM_Trans"(C := NOT #S_EstopIn, P := 1);
	
	#SM();
	
	CASE #SM.iState OF
	        #ST_IDLE :
	            #DiagCode := 16#0000;
	            
	        #ST_ENABLED:
	            #DiagCode := 16#8000;
	            
	        #ST_INIT:
	            #DiagCode := 16#8001;
	            
	        #ST_WAITRESET1:
	            IF #SM.xStateFirstCall AND #Reset THEN
	                #DiagCode := 16#C001;
	            END_IF;
	            
	            IF #DiagCode <> 16#C001 THEN
	                #DiagCode := 16#8402;
	            END_IF;
	            
	        #ST_WAITRESET2:
	            IF #SM.xStateFirstCall AND #Reset THEN
	                #DiagCode := 16#C011;
	            END_IF;
	            
	            IF #DiagCode <> 16#C011 THEN
	                #DiagCode := 16#8404;
	            END_IF;
	            
	        #ST_WAITESTOP1:
	            #DiagCode := 16#8802;
	            
	        #ST_WAITESTOP2:
	            #DiagCode := 16#8804;
	            
	END_CASE;
	
	
	#Ready := #SM.iState <> #ST_IDLE;
	#S_EstopOut := #SM.iState = #ST_ENABLED;
	#SafetyDemand := #SM.iState = #ST_WAITESTOP1 OR #SM.iState = #ST_WAITESTOP2;
	#ResetRequest := #DiagCode = 16#8402 OR #DiagCode = 16#8404;
	#Error := #DiagCode = 16#C001 OR #DiagCode = 16#C011;
	
	#stat.prev.Reset := #Reset;
END_FUNCTION_BLOCK

