FUNCTION_BLOCK "SF_Guard"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      Activate { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Активация защиты (1 = устройство активно)
      S_GuardSwitch1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Вход 1 переключателя безопасности
      S_GuardSwitch2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Вход 2 переключателя безопасности
      DiscrepancyTime { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Time;   // Макс. время различия срабатывания
      S_StartReset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Тип сброса при запуске (0 = требуется ручной сброс)
      S_AutoReset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Тип сброса после срабатывания защиты (0 = требуется ручной сброс)
      Reset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Сброс защиты (0 => 1)
   END_VAR

   VAR_OUTPUT 
      Ready { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Блок активен
      S_GuardOut { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Безопасное состояние
      SafetyDemand { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Запрос безопасного состояния
      ResetRequest { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Требуется сброс
      Error { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Ошибка исполнения блока
      DiagCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;   // Диагностический код
   END_VAR

   VAR 
      stat { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         prev { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
            Reset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
         END_STRUCT;
      END_STRUCT;
      SM { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "SM_StateMachine";
   END_VAR

   VAR_TEMP 
      Tr : "SM_udtTransitions";
   END_VAR

   VAR CONSTANT 
      ST_IDLE : Int := 0;
      ST_INIT : Int := 1;
      ST_OPENINGSTARTED : Int := 2;
      ST_GUARDOPENED : Int := 3;
      ST_WAITSWITCH1 : Int := 4;
      ST_WAITSWITCH2 : Int := 5;
      ST_DISCREPANCY : Int := 6;
      ST_GUARDCLOSED : Int := 7;
      ST_WAITRESET : Int := 8;
      ST_NORMAL : Int := 9;
   END_VAR


BEGIN
	#Tr.t[#ST_IDLE, #ST_INIT] := "SM_Trans"(C := #Activate, P := 0);
	
	#Tr.t[#ST_INIT, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#Tr.t[#ST_INIT, #ST_OPENINGSTARTED] := "SM_Trans"(C := NOT #S_GuardSwitch1 OR NOT #S_GuardSwitch2, P := 1);
	#Tr.t[#ST_INIT, #ST_WAITRESET] := "SM_Trans"(C := #S_GuardSwitch1 AND #S_GuardSwitch2 AND NOT #S_StartReset, P := 2);
	#Tr.t[#ST_INIT, #ST_NORMAL] := "SM_Trans"(C := #S_GuardSwitch1 AND #S_GuardSwitch2 AND #S_StartReset, P := 3);
	
	#Tr.t[#ST_OPENINGSTARTED, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#Tr.t[#ST_OPENINGSTARTED, #ST_GUARDOPENED] := "SM_Trans"(C := NOT #S_GuardSwitch1 AND NOT #S_GuardSwitch2, P := 1);
	
	#Tr.t[#ST_GUARDOPENED, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#Tr.t[#ST_GUARDOPENED, #ST_WAITSWITCH2] := "SM_Trans"(C := #S_GuardSwitch1, P := 1);
	#Tr.t[#ST_GUARDOPENED, #ST_WAITSWITCH1] := "SM_Trans"(C := #S_GuardSwitch2, P := 2);
	
	#Tr.t[#ST_WAITSWITCH1, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#Tr.t[#ST_WAITSWITCH1, #ST_DISCREPANCY] := "SM_Trans"(C := #SM.StateTime >= #DiscrepancyTime, P := 1);
	#Tr.t[#ST_WAITSWITCH1, #ST_OPENINGSTARTED] := "SM_Trans"(C := NOT #S_GuardSwitch2, P := 2);
	#Tr.t[#ST_WAITSWITCH1, #ST_GUARDCLOSED] := "SM_Trans"(C := #S_GuardSwitch1 AND #S_GuardSwitch2, P := 3);
	
	#Tr.t[#ST_WAITSWITCH2, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#Tr.t[#ST_WAITSWITCH2, #ST_DISCREPANCY] := "SM_Trans"(C := #SM.StateTime >= #DiscrepancyTime, P := 1);
	#Tr.t[#ST_WAITSWITCH2, #ST_OPENINGSTARTED] := "SM_Trans"(C := NOT #S_GuardSwitch1, P := 2);
	#Tr.t[#ST_WAITSWITCH2, #ST_GUARDCLOSED] := "SM_Trans"(C := #S_GuardSwitch1 AND #S_GuardSwitch2, P := 3);
	
	#Tr.t[#ST_DISCREPANCY, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#Tr.t[#ST_DISCREPANCY, #ST_GUARDOPENED] := "SM_Trans"(C := NOT #S_GuardSwitch1 AND NOT #S_GuardSwitch2, P := 1);
	
	#Tr.t[#ST_GUARDCLOSED, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#Tr.t[#ST_GUARDCLOSED, #ST_OPENINGSTARTED] := "SM_Trans"(C := NOT #S_GuardSwitch1 OR NOT #S_GuardSwitch2, P := 1);
	#Tr.t[#ST_GUARDCLOSED, #ST_WAITRESET] := "SM_Trans"(C := NOT #S_AutoReset, P := 2);
	#Tr.t[#ST_GUARDCLOSED, #ST_NORMAL] := "SM_Trans"(C := #S_AutoReset, P := 3);
	
	#Tr.t[#ST_WAITRESET, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#Tr.t[#ST_WAITRESET, #ST_OPENINGSTARTED] := "SM_Trans"(C := NOT #S_GuardSwitch1 OR NOT #S_GuardSwitch2, P := 2);
	#Tr.t[#ST_WAITRESET, #ST_NORMAL] := "SM_Trans"(C := #Reset AND NOT #stat.prev.Reset, P := 3);
	
	#Tr.t[#ST_NORMAL, #ST_IDLE] := "SM_Trans"(C := NOT #Activate, P := 0);
	#Tr.t[#ST_NORMAL, #ST_OPENINGSTARTED] := "SM_Trans"(C := NOT #S_GuardSwitch1 OR NOT #S_GuardSwitch2, P := 1);
	
	
	#SM(Tr := #Tr);
	
	
	CASE #SM.State OF
	    #ST_IDLE:
	        #DiagCode := 16#0000;
	        
	    #ST_NORMAL:
	        #DiagCode := 16#8000;
	        
	    #ST_INIT:
	        #DiagCode := 16#8001;
	        
	    #ST_GUARDCLOSED:
	        #DiagCode := 16#8002;
	        
	    #ST_WAITRESET:
	        IF #SM.StateFirstCall AND #Reset THEN
	            #DiagCode := 16#C001;
	        END_IF;
	        
	        IF #DiagCode <> 16#C001 THEN
	            #DiagCode := 16#8402;
	        END_IF;
	        
	    #ST_OPENINGSTARTED:
	        #DiagCode := 16#8802;
	        
	    #ST_GUARDOPENED:
	        #DiagCode := 16#8804;
	        
	    #ST_WAITSWITCH2:
	        #DiagCode := 16#8806;
	        
	    #ST_WAITSWITCH1:
	        #DiagCode := 16#8808;
	        
	    #ST_DISCREPANCY:
	        IF #SM.StatePrev = #ST_WAITSWITCH2 THEN
	            #DiagCode := 16#C010;
	        ELSIF #SM.StatePrev = #ST_WAITSWITCH1 THEN
	            #DiagCode := 16#C020;
	        END_IF;
	        
	END_CASE;
	
	
	#Ready := #SM.State <> #ST_IDLE;
	#S_GuardOut := #SM.State = #ST_NORMAL;
	
	#SafetyDemand := #SM.State = #ST_OPENINGSTARTED OR #SM.State = #ST_GUARDOPENED
	OR #SM.State = #ST_WAITSWITCH1 OR #SM.State = #ST_WAITSWITCH2;
	
	#ResetRequest := #DiagCode = 16#8402;
	#Error := #DiagCode = 16#C001 OR #DiagCode = 16#C010 OR #DiagCode = 16#C020;
	
	
	#stat.prev.Reset := #Reset;
END_FUNCTION_BLOCK

